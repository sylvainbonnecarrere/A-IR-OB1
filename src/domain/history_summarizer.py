"""
History Summarizer - Service de Synth√®se Automatique de l'Historique

Ce module impl√©mente la logique de synth√®se automatique des conversations longues
pour maintenir une m√©moire √† long terme efficace tout en pr√©servant les performances.
"""

import logging
from datetime import datetime
from typing import Optional, Dict, Any
from src.domain.llm_service_interface import LLMServiceInterface
from src.domain.llm_service_factory import LLMServiceFactory
from src.domain.tracer import Tracer  # JALON 4.1-B: Int√©gration du tra√ßage
from src.models.data_contracts import (
    Session,
    HistoryConfig,
    ChatMessage,
    AgentConfig,
    OrchestrationRequest,
    SessionManager
)

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class HistorySummarizer:
    """
    Service de synth√®se automatique de l'historique de conversation
    
    Ce service analyse l'historique d'une session et d√©clenche automatiquement
    une synth√®se lorsque les seuils configur√©s sont d√©pass√©s, rempla√ßant
    l'historique long par un r√©sum√© concis.
    """
    
    def __init__(self, session_manager: SessionManager):
        """
        Initialise le service de synth√®se
        
        Args:
            session_manager: Manager pour la persistance des sessions
        """
        self.session_manager = session_manager
    
    async def summarize_if_needed(self, session: Session, tracer: Optional[Tracer] = None) -> Session:
        """
        V√©rifie et effectue la synth√®se de l'historique si n√©cessaire
        
        Cette m√©thode constitue le c≈ìur de la m√©moire √† long terme :
        1. Calcule les m√©triques de l'historique actuel
        2. V√©rifie si les seuils sont d√©pass√©s
        3. Si oui, synth√©tise l'historique via un LLM sp√©cialis√©
        4. Remplace l'historique par le r√©sum√© + dernier message utilisateur
        5. Sauvegarde la session mise √† jour
        
        Args:
            session: Session √† analyser et potentiellement synth√©tiser
            
        Returns:
            Session: Session mise √† jour (synth√©tis√©e ou inchang√©e)
        """
        if not session.history_config.enabled:
            logger.debug(f"Synth√®se d√©sactiv√©e pour session {session.session_id}")
            return session
        
        # V√©rification des seuils
        if not session.should_trigger_summarization():
            logger.debug(f"Seuils non atteints pour session {session.session_id}")
            return session
        
        # Calcul des m√©triques pour le logging
        metrics = session.get_history_metrics()
        logger.info(f"D√©clenchement synth√®se pour session {session.session_id}")
        logger.info(f"M√©triques: {metrics}")
        
        # JALON 4.1-B: Tra√ßage du d√©but de synth√®se
        if tracer:
            await tracer.log_step(
                component="HistorySummarizer",
                event="summarization_start",
                details={
                    "session_id": session.session_id,
                    "messages_count": metrics['messages'],
                    "tokens_count": metrics['tokens']
                }
            )
        
        try:
            # Synth√®se de l'historique
            summary_message = await self._create_summary(session, tracer)
            
            # Pr√©servation du dernier message utilisateur
            last_user_message = self._get_last_user_message(session.history)
            
            # Remplacement de l'historique
            new_history = [summary_message]
            if last_user_message:
                new_history.append(last_user_message)
            
            session.history = new_history
            session.updated_at = datetime.now().isoformat()
            
            # Sauvegarde de la session mise √† jour
            await self.session_manager.save_session(session)
            
            logger.info(f"Synth√®se r√©ussie pour session {session.session_id}")
            logger.info(f"Historique r√©duit de {metrics['messages']} √† {len(new_history)} messages")
            
            # JALON 4.1-B: Tra√ßage de la synth√®se r√©ussie
            if tracer:
                await tracer.log_step(
                    component="HistorySummarizer",
                    event="summarization_success",
                    details={
                        "session_id": session.session_id,
                        "original_messages": metrics['messages'],
                        "new_messages": len(new_history),
                        "summary_length": len(summary_message.content)
                    }
                )
            
            return session
            
        except Exception as e:
            logger.error(f"Erreur lors de la synth√®se pour session {session.session_id}: {str(e)}")
            
            # JALON 4.1-B: Tra√ßage des erreurs de synth√®se
            if tracer:
                await tracer.log_error(
                    error_type="SUMMARIZATION_ERROR",
                    error_message=str(e)
                )
            
            # En cas d'erreur, on retourne la session inchang√©e
            return session
    
    async def _create_summary(self, session: Session, tracer: Optional[Tracer] = None) -> ChatMessage:
        """
        G√©n√®re le r√©sum√© de l'historique via un LLM de synth√®se
        
        Args:
            session: Session contenant l'historique √† synth√©tiser
            
        Returns:
            ChatMessage: Message de r√©sum√© cr√©√© par le LLM
            
        Raises:
            Exception: En cas d'erreur lors de l'appel au LLM
        """
        # Cr√©ation du service LLM de synth√®se
        summarizer_service = LLMServiceFactory.create_service(
            session.history_config.llm_provider
        )
        
        # Construction du prompt de synth√®se
        history_text = self._format_history_for_summary(session.history)
        
        summary_messages = [
            ChatMessage(
                role="system", 
                content=session.history_config.system_prompt
            ),
            ChatMessage(
                role="user",
                content=f"Voici l'historique de conversation √† synth√©tiser :\n\n{history_text}\n\nCr√©e un r√©sum√© concis qui pr√©serve le contexte essentiel pour la suite de la conversation."
            )
        ]
        
        # Configuration pour la synth√®se
        summary_config = AgentConfig(
            provider=session.history_config.llm_provider,
            model_version=session.history_config.model_version,
            temperature=0.3,  # Temp√©rature basse pour coh√©rence
            max_tokens=1000,  # R√©sum√© concis
            tools_enabled=False,  # Pas d'outils pour la synth√®se
            system_prompt=session.history_config.system_prompt
        )
        
        # Requ√™te de synth√®se
        summary_request = OrchestrationRequest(
            message="",  # Message vide, tout est dans l'historique
            agent_config=summary_config,
            conversation_history=summary_messages
        )
        
        # Appel au LLM de synth√®se
        response = await summarizer_service.orchestration_completion(summary_request)
        
        if not response.content:
            raise Exception("Le LLM de synth√®se n'a pas g√©n√©r√© de contenu")
        
        # Cr√©ation du message de r√©sum√©
        summary_message = ChatMessage(
            role="assistant",
            content=f"[R√âSUM√â AUTOMATIQUE] {response.content}"
        )
        
        return summary_message
    
    def _format_history_for_summary(self, history: list[ChatMessage]) -> str:
        """
        Formate l'historique pour le prompt de synth√®se
        
        Args:
            history: Liste des messages √† formater
            
        Returns:
            str: Historique format√© pour la synth√®se
        """
        if not history:
            return "Aucun historique disponible."
        
        formatted_lines = []
        for i, message in enumerate(history, 1):
            role_emoji = {
                "user": "üë§",
                "assistant": "ü§ñ", 
                "system": "‚öôÔ∏è",
                "tool": "üîß"
            }.get(message.role, "‚ùì")
            
            content = message.content or "[Contenu vide]"
            formatted_lines.append(f"{i}. {role_emoji} {message.role.upper()}: {content}")
        
        return "\n".join(formatted_lines)
    
    def _get_last_user_message(self, history: list[ChatMessage]) -> Optional[ChatMessage]:
        """
        R√©cup√®re le dernier message utilisateur de l'historique
        
        Args:
            history: Historique de conversation
            
        Returns:
            Optional[ChatMessage]: Dernier message utilisateur ou None
        """
        # Parcours en sens inverse pour trouver le dernier message utilisateur
        for message in reversed(history):
            if message.role == "user":
                return message
        return None
    
    def get_summarization_stats(self, session: Session) -> Dict[str, Any]:
        """
        Calcule des statistiques sur l'√©tat de synth√®se d'une session
        
        Args:
            session: Session √† analyser
            
        Returns:
            Dict: Statistiques de synth√®se
        """
        metrics = session.get_history_metrics()
        config = session.history_config
        
        return {
            "session_id": str(session.session_id),
            "summarization_enabled": config.enabled,
            "current_metrics": metrics,
            "thresholds": {
                "messages": config.message_threshold,
                "chars": config.char_threshold, 
                "words": config.word_threshold,
                "tokens": config.token_threshold
            },
            "threshold_status": {
                "messages": f"{metrics['messages']}/{config.message_threshold} ({'‚úÖ' if metrics['messages'] >= config.message_threshold else '‚è≥'})",
                "chars": f"{metrics['chars']}/{config.char_threshold} ({'‚úÖ' if metrics['chars'] >= config.char_threshold else '‚è≥'})",
                "words": f"{metrics['words']}/{config.word_threshold} ({'‚úÖ' if metrics['words'] >= config.word_threshold else '‚è≥'})",
                "tokens": f"{metrics['estimated_tokens']}/{config.token_threshold} ({'‚úÖ' if metrics['estimated_tokens'] >= config.token_threshold else '‚è≥'})"
            },
            "should_summarize": session.should_trigger_summarization(),
            "has_summary": any("[R√âSUM√â AUTOMATIQUE]" in (msg.content or "") for msg in session.history)
        }