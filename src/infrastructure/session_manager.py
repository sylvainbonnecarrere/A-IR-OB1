"""
In-Memory Session Manager - Gestionnaire de sessions en mÃ©moire

Ce module implÃ©mente un gestionnaire de sessions simple stockant les donnÃ©es
en mÃ©moire pour le dÃ©veloppement et les tests. En production, ceci serait
remplacÃ© par une implÃ©mentation avec base de donnÃ©es ou cache distribuÃ©.
"""

import logging
from datetime import datetime
from typing import Dict, Optional, List
from uuid import UUID
from src.models.data_contracts import Session, HistoryConfig, SessionManager

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class InMemorySessionManager(SessionManager):
    """
    Gestionnaire de sessions en mÃ©moire
    
    Cette implÃ©mentation stocke les sessions dans un dictionnaire en mÃ©moire.
    Les sessions sont perdues au redÃ©marrage de l'application.
    
    Note: En production, utiliser une base de donnÃ©es (PostgreSQL, MongoDB)
    ou un cache distribuÃ© (Redis) pour la persistance rÃ©elle.
    """
    
    def __init__(self):
        """Initialise le gestionnaire avec un stockage vide"""
        self._sessions: Dict[str, Session] = {}
        logger.info("InMemorySessionManager initialisÃ©")
    
    async def get_session(self, session_id: str) -> Optional[Session]:
        """
        RÃ©cupÃ¨re une session par son ID
        
        Args:
            session_id: Identifiant unique de la session (string)
            
        Returns:
            Session si trouvÃ©e, None sinon
        """
        session = self._sessions.get(session_id)
        if session:
            logger.debug(f"Session rÃ©cupÃ©rÃ©e: {session_id}")
        else:
            logger.warning(f"Session non trouvÃ©e: {session_id}")
        return session
    
    async def save_session(self, session: Session) -> None:
        """
        Sauvegarde ou met Ã  jour une session
        
        Args:
            session: Session Ã  sauvegarder
        """
        # Mise Ã  jour du timestamp
        session.last_message_at = datetime.now()
        
        # Sauvegarde en mÃ©moire
        self._sessions[str(session.session_id)] = session
        logger.info(f"ğŸ’¾ Session {session.session_id} sauvegardÃ©e")
    
    async def create_new_session(
        self, 
        agent_name: str, 
        history_config: Optional[HistoryConfig] = None
    ) -> Session:
        """
        CrÃ©e une nouvelle session
        
        Args:
            agent_name: Nom de l'agent assignÃ©
            history_config: Configuration optionnelle de l'historique
            
        Returns:
            Nouvelle session crÃ©Ã©e
        """
        # Configuration par dÃ©faut si non fournie
        if history_config is None:
            history_config = HistoryConfig()
        
        # CrÃ©ation de la session
        session = Session(
            agent_name=agent_name,
            history_config=history_config,
            status="ACTIVE"
        )
        
        # Sauvegarde initiale
        await self.save_session(session)
        
        logger.info(f"Session crÃ©Ã©e: {session.session_id} pour agent {agent_name}")
        return session
    
    async def update_session(self, session: Session) -> bool:
        """
        Met Ã  jour une session existante
        
        Args:
            session: Session Ã  mettre Ã  jour
            
        Returns:
            True si mise Ã  jour rÃ©ussie, False sinon
        """
        try:
            await self.save_session(session)
            return True
        except Exception as e:
            logger.error(f"Erreur mise Ã  jour session {session.session_id}: {e}")
            return False
    
    async def list_sessions(self, limit: int = 100) -> List[Session]:
        """
        Liste les sessions existantes
        
        Args:
            limit: Nombre maximum de sessions Ã  retourner
            
        Returns:
            Liste des sessions (triÃ©es par date de crÃ©ation dÃ©croissante)
        """
        sessions = list(self._sessions.values())
        
        # Tri par date de crÃ©ation (plus rÃ©centes en premier)
        sessions.sort(
            key=lambda s: s.created_at or "1970-01-01T00:00:00", 
            reverse=True
        )
        
        # Limitation du nombre de rÃ©sultats
        limited_sessions = sessions[:limit]
        
        logger.debug(f"Liste de {len(limited_sessions)} sessions retournÃ©e")
        return limited_sessions
    
    async def delete_session(self, session_id: UUID) -> bool:
        """
        Supprime une session
        
        Args:
            session_id: ID de la session Ã  supprimer
            
        Returns:
            bool: True si supprimÃ©e, False si non trouvÃ©e
        """
        if session_id in self._sessions:
            del self._sessions[session_id]
            logger.info(f"Session supprimÃ©e: {session_id}")
            return True
        else:
            logger.warning(f"Tentative de suppression d'une session inexistante: {session_id}")
            return False
    
    async def update_session_status(self, session_id: UUID, status: str) -> bool:
        """
        Met Ã  jour le statut d'une session
        
        Args:
            session_id: ID de la session
            status: Nouveau statut
            
        Returns:
            bool: True si mise Ã  jour rÃ©ussie
        """
        session = await self.get_session(session_id)
        if session:
            session.status = status
            await self.save_session(session)
            logger.info(f"Statut session {session_id} mis Ã  jour: {status}")
            return True
        return False
    
    def get_stats(self) -> Dict[str, any]:
        """
        Retourne des statistiques sur le gestionnaire de sessions
        
        Returns:
            Dict: Statistiques diverses
        """
        sessions = list(self._sessions.values())
        
        # Comptage par statut
        status_counts = {}
        agent_counts = {}
        total_messages = 0
        
        for session in sessions:
            # Statuts
            status_counts[session.status] = status_counts.get(session.status, 0) + 1
            
            # Agents
            agent_counts[session.agent_name] = agent_counts.get(session.agent_name, 0) + 1
            
            # Messages
            total_messages += len(session.history)
        
        return {
            "total_sessions": len(sessions),
            "status_distribution": status_counts,
            "agent_distribution": agent_counts,
            "total_messages": total_messages,
            "average_messages_per_session": total_messages / len(sessions) if sessions else 0,
            "storage_type": "in_memory"
        }